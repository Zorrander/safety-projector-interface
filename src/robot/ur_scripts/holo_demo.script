def holo_demo():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(2.0, [0.0, 0.0, 0.06])
  set_gravity([0.0, 0.0, 9.82])
  global casio=p[-0.21064459936943247,0.08970106798971833,0.07053610490753161,2.1799159185239705,2.2207810076088936,1.0207732329457367E-4]
  # begin: URCap Installation Node
  #   Source: RG - On Robot, 1.8.1, On Robot ApS
  #   Type: RG Configuration
  global measure_width=0
  global grip_detected=False
  global lost_grip=False
  global zsysx=0
  global zsysy=0
  global zsysz=0.06935
  global zsysm=0.7415
  global zmasx=0
  global zmasy=0
  global zmasz=0.18664
  global zmasm=0
  global zmasm=0
  global zslax=0
  global zslay=0
  global zslaz=0
  global zslam=0
  global zslam=0
  thread lost_grip_thread():
  while True:
  set_tool_voltage(24)
  	if True ==get_digital_in(9):
  		sync()
  		sync()
  		sync()
  		if True == grip_detected:
  			if False == get_digital_in(8):
  				grip_detected=False
  				lost_grip=True
  			end
  		end
  	set_tool_analog_input_domain(0, 1)
  	set_tool_analog_input_domain(1, 1)
  	zscale = (get_analog_in(2)-0.026)/2.976
  	zangle = zscale*1.57079633-0.087266462
  	zwidth = 5+110*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	end
  	sync()
  end
  end
  lg_thr = run lost_grip_thread()
  def RG2(target_width=110, target_force=40, payload=0.0, set_payload=False, depth_compensation=False, slave=False):
  	grip_detected=False
  	if slave:
  		slave_grip_detected=False
  	else:
  		master_grip_detected=False
  	end
  	timeout = 0
  	while get_digital_in(9) == False:
  	  if timeout > 400:
  	    break
  	  end
  	  timeout = timeout+1
  	  sync()
  	end
  	def bit(input):
  	  msb=65536
  	  local i=0
  	  local output=0
  	  while i<17:
  	    set_digital_out(8,True)
  	    if input>=msb:
  	      input=input-msb
  	      set_digital_out(9,False)
  	    else:
  	      set_digital_out(9,True)
  	    end
  	    if get_digital_in(8):
  	      out=1
  	    end
  	    sync()
  	    set_digital_out(8,False)
  	    sync()
  	    input=input*2
  	    output=output*2
  	    i=i+1
  	  end
  	  return output
  	end
  	target_width=target_width+9.2
  	if target_force>40:
  	target_force=40
  	end
  	if target_force<4:
  	target_force=4
  	end
  	if target_width>110:
  	target_width=110
  	end
  	if target_width<0:
  	target_width=0
  	end
  	rg_data=floor(target_width)*4
  	rg_data=rg_data+floor(target_force/2)*4*111
  	if slave:
  	rg_data=rg_data+16384
  	end
  	bit(rg_data)
  	if depth_compensation:
  	finger_length = 55.0/1000
  	finger_heigth_disp = 5.0/1000
  	center_displacement = 7.5/1000
  
  	start_pose = get_forward_kin()
  	set_analog_inputrange(2, 1)
  	zscale = (get_analog_in(2)-0.026)/2.976
  	zangle = zscale*1.57079633-0.087266462
  	zwidth = 5+110*sin(zangle)
  
  	start_depth = cos(zangle)*finger_length
  
  	sync()
  	sync()
  	timeout = 0
  	while get_digital_in(9) == True:
  	  timeout=timeout+1
  	  sync()
  	  if timeout > 20:
  	    break
  	  end
  	end
  	timeout = 0
  	while get_digital_in(9) == False:
  	  zscale = (get_analog_in(2)-0.026)/2.976
  	  zangle = zscale*1.57079633-0.087266462
  	  zwidth = 5+110*sin(zangle)
  	  measure_depth = cos(zangle)*finger_length
  	  compensation_depth = (measure_depth - start_depth)
  	  target_pose = pose_trans(start_pose,p[0,0,-compensation_depth,0,0,0])
  	  if timeout > 400:
  	    break
  	  end
  	  timeout=timeout+1
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	#textmsg("end gripper move!!!!!")
  	#nspeedthr = 0.001
  	#nspeed = norm(get_actual_tcp_speed())
  	#while nspeed > nspeedthr:
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  nspeed = norm(get_actual_tcp_speed())
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	if point_dist(target_pose, get_forward_kin()) > 0.005:
  	popup("Lower grasping force or max width",title="RG-lag threshold exceeded", warning=False, error=False, blocking=False)
  	end
  	end
  	nspeed = norm(get_actual_tcp_speed())
  	while nspeed > 0.001:
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	nspeed = norm(get_actual_tcp_speed())
  	end
  	stopj(2)
  	end
  	if depth_compensation==False:
  	timeout = 0
  	while get_digital_in(9) == True:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > 20:
  	    break
  	  end
  	end
  	timeout = 0
  	while get_digital_in(9) == False:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > 400:
  	    break
  	  end
  	end
  	end
  	sync()
  	sync()
  	sync()
  	if set_payload:
  	if slave:
  	if get_analog_in(3) < 2:
  	zslam=0
  	else:
  	zslam=payload
  	end
  	else:
  	if get_digital_in(8) == False:
  	zmasm=0
  	else:
  	zmasm=payload
  	end
  	end
  	zload=zmasm+zslam+zsysm
  	set_payload(zload,[(zsysx*zsysm+zmasx*zmasm+zslax*zslam)/zload,(zsysy*zsysm+zmasy*zmasm+zslay*zslam)/zload,(zsysz*zsysm+zmasz*zmasm+zslaz*zslam)/zload])
  	end
  	master_grip_detected=False
  	master_lost_grip=False
  	slave_grip_detected=False
  	slave_lost_grip=False
  	if True == get_digital_in(8):
  		master_grip_detected=True
  	end
  	if get_analog_in(3)>2:
  		slave_grip_detected=True
  	end
  	grip_detected=False
  	lost_grip=False
  	if True == get_digital_in(8):
  		grip_detected=True
  	end
  	zscale = (get_analog_in(2)-0.026)/2.976
  	zangle = zscale*1.57079633-0.087266462
  	zwidth = 5+110*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	if slave:
  	slave_measure_width=measure_width
  	else:
  	master_measure_width=measure_width
  	end
  	return grip_detected
  end
  set_tool_voltage(24)
  set_tcp(p[0,0,0.18664,0,-0,0])
  # end: URCap Installation Node
  while (True):
    $ 1 "Robot Program"
    $ 2 "MoveJ"
    $ 3 "Waypoint_5"
    movej([-1.4499974407878842, -1.4005924022927907, -1.7253608360694477, -1.5861884054755624, -4.727047422169798, 0.2208502387836484], a=1.3962634015954636, v=1.0471975511965976)
    $ 4 "MoveJ"
    $ 5 "Waypoint_1"
    movej([-0.43400720408476, -1.2183927983730314, -2.080404527026179, -1.3561057761108843, -4.633370511875551, -2.7968091461233957], a=1.3962634015954636, v=1.0471975511965976)
    $ 6 "MoveJ"
    $ 7 "Waypoint_2"
    movej([-0.5183833281146448, -1.8365743795977991, -1.3645814100848597, -1.5055339972125452, -4.751645509396688, -1.1943615118609827], a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: RG - On Robot, 1.8.1, On Robot ApS
    #   Type: RG2
    $ 8 "RG2(0)"
    RG2(0,40,0.0,True,False,False)
    # end: URCap Program Node
    $ 9 "MoveJ"
    $ 10 "Waypoint_3"
    movej([-0.11454660097231084, -1.5171244780169886, -1.6775673071490687, -1.5319817701922815, -4.754172746335165, -1.19450551668276], a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: RG - On Robot, 1.8.1, On Robot ApS
    #   Type: RG2
    $ 11 "RG2(100)"
    RG2(100,40,0.0,True,False,False)
    # end: URCap Program Node
    $ 12 "MoveJ"
    $ 13 "Waypoint_4"
    movej([0.24137709901573043, -1.7507954786169542, -1.3658483261097452, -1.540680264629966, -4.732185078367379, 0.2673206549922515], a=1.3962634015954636, v=1.0471975511965976)
  end
end
